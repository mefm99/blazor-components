@page "/virtualization"

@inject WeatherForecastService ForecastService

<h1>Virtualization example</h1>
<span>showing 1000 rows</span>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DataTable TModel="WeatherForecast" Items="forecasts">
        <DataTableColumn TModel="WeatherForecast">
            <HeaderTemplate>
                Count
            </HeaderTemplate>
            <RowTemplate Context="forecast">
                @(Array.IndexOf(forecasts, forecast) + 1)
            </RowTemplate>
        </DataTableColumn>
        <DataTableColumn TModel="WeatherForecast" IsSortable="true" IsFilterable="true" Property="(e) => e.Date"/>
        <DataTableColumn TModel="WeatherForecast" IsSortable="true" IsFilterable="true" Property="(e) => e.TemperatureC" CustomTitle="Celsius"   />
        <DataTableColumn TModel="WeatherForecast" IsSortable="true" IsFilterable="true" Property="(e) => e.TemperatureF" CustomTitle="Fahrenheit"/>
        <DataTableColumn TModel="WeatherForecast" IsSortable="true" IsFilterable="true" Property="(e) => e.MyNullableInt"/>
        <DataTableColumn TModel="WeatherForecast" IsSortable="true" IsFilterable="true" Property="(e) => e.Summary"/>
        <DataTableColumn TModel="WeatherForecast" IsSortable="true" IsFilterable="true" Property="(e) => e.Country"/>
        <DataTableColumn TModel="WeatherForecast" IsSortable="true" IsFilterable="true" Property="(e) => e.UpdatedRecently" CustomTitle="Recently updated"/>
    </DataTable>
}

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now, 1000);
    }
}
