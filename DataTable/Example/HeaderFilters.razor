@page "/headerfilters"

@inject WeatherForecastService ForecastService

<h1>Filtering example</h1>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <span>Search on apply</span>
    <br />
    <DataTable TModel="WeatherForecast" Items="forecasts" SearchOnApplyHeaderFilter="true" IncludeHeaderFilters="true" IncludeAdvancedFilters="false">
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.Date"/>
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.TemperatureC" CustomTitle="Celsius"/>
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.TemperatureF" CustomTitle="Fahrenheit"/>
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.MyNullableInt"/>
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.Summary"/>
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.Country"/>
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.UpdatedRecently" CustomTitle="Recently updated"/>
    </DataTable>

    <br />

    <span>Search only when search pressed</span>
    <br />
    <DataTable TModel="WeatherForecast" Items="forecasts" IncludeSearchButton="true" IncludeHeaderFilters="true" SearchOnApplyHeaderFilter="false">
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.Date"/>
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.TemperatureC" CustomTitle="Celsius"   />
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.TemperatureF" CustomTitle="Fahrenheit"/>
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.MyNullableInt"/>
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.Summary"/>
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.Country"/>
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.UpdatedRecently" CustomTitle="Recently updated"/>
    </DataTable>

    <br />

    <span>Include toggle filter button</span>
    <br />
    <DataTable TModel="WeatherForecast" Items="forecasts" IncludeSearchButton="true" IncludeToggleFilters="true" IncludeHeaderFilters="true" SearchOnApplyHeaderFilter="false">
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.Date"/>
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.TemperatureC" CustomTitle="Celsius"   />
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.TemperatureF" CustomTitle="Fahrenheit"/>
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.MyNullableInt"/>
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.Summary"/>
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.Country"/>
        <DataTableColumn TModel="WeatherForecast" IsFilterable="true" Property="(e) => e.UpdatedRecently" CustomTitle="Recently updated"/>
    </DataTable>

}

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now, 5);
    }
}
